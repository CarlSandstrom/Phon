__copyright__ = "Copyright (C) 2013 Kristoffer Carlsson"

__license__ = """
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import re

from phon.mesh_objects.element import Element
from phon.mesh_objects.element_set import ElementSet
from phon.mesh_objects.node import Node
from phon.mesh_objects.mesh import Mesh
from phon.mesh_objects.node_set import NodeSet

from phon.io.element_name_dictionary import element_dictionary_inverse
from phon.io.element_name_dictionary import elements_2d
from phon.io.element_name_dictionary import elements_3d

def read_from_neper_inp(filename, verbose=0):
    """ 
    Reads a .inp file generated by Neper.
    """


    with open(filename, "r") as f:
    
        # Read header
        re_part = re.compile("\*Part, name=(.*)")
        line = f.readline()
        match = re_part.match(line)
        if not match:
            raise ReadInpFileError("Error parsing file. Expected '*Part, "
                                   "name=XXX', read '" + line + "'.")

        # Initiate a mesh class with the same name as the part
        mesh = Mesh(match.group(1))

        # Read mesh objects
        num_elems = 0
        while True:
            start_of_line = f.tell()
            keyword = f.readline().strip().split(",")[0]
            f.seek(start_of_line)
            if keyword == "*Node":
                read_nodes(f, mesh, verbose)
                continue
            if keyword == "*Element":
                num_elems += read_elements(f, mesh, num_elems, verbose)
                continue
            if keyword == "*Elset":
                read_element_set(f, mesh, verbose)
                continue
            if keyword == "*Nset":
                read_node_set(f, mesh, verbose)
                continue
            if keyword == "*End Part":
                break
            else:
                raise ReadInpFileError("Keyword '" + str(keyword) + "' is not recognized")

        f.close()
        return mesh

def read_nodes(f, mesh, verbose):
    line = f.readline()
    if not (line == "*Node\n"):
        raise ReadInpFileError("\nError parsing file. Expected '*Node', read '" + line + "'.")

    num_nodes = 0
    while True:
        start_of_line = f.tell()
        line = f.readline()
        if (line.strip() == ''):
            continue
        if line[0] == '*':
            f.seek(start_of_line)
            return 
        num_nodes += 1
        if verbose == 1:
            print ("\rReading nodes, %d nodes read" % (num_nodes)),
        # Make line into this list :[id, x, y, z]
        node_numbers = map(to_number, line.strip().split(','))
        node = Node(*node_numbers[1:])
        mesh.nodes[node_numbers[0]] = node
        if verbose == 2:
            print ("Read {0}.\n".format(node))


def read_elements(f, mesh, num_elems, verbose): 
    line = f.readline()   
    re_element = re.compile("\*Element, type=(.*)")
    match = re_element.match(line)
    if not match:
        raise ReadInpFileError("\nError parsing file. Expected '*Element, \
        type=XXX', got '" + line + "'.")

    element_name = re_element.match(line).group(1)
    elem_ids = []
    while True:
        start_of_line = f.tell()
        line = f.readline()
        if (line.strip() == ''):
            continue
        if line[0] == '*':
            f.seek(start_of_line)
            return num_elems
        num_elems += 1
        if verbose == 1:
            print ("\rReading element %s, with id %d." % (element_name, num_elems)),
        
        element_numbers = map(to_number, line.strip().split(','))
        element = Element(element_name, element_numbers[1:])
        mesh.elements[element_numbers[0]] = element
        elem_ids.append(element_numbers[0])

    mesh.element_indices[elem_name] = elem_ids


def read_element_set(f, mesh, verbose):
    line = f.readline()   
    re_element_set = re.compile("\*Elset, elset=(.*)")
    match = re_element_set.match(line)
    if not match:
        raise ReadInpFileError("Error parsing file. Expected '*Elset, "
                               "elset=X', got '" + line + "'.")

    element_set_name = re_element_set.match(line).group(1)
    if "face" in element_set_name:
        dim = 2
    if "poly" in element_set_name:
        dim = 3
    element_set = ElementSet(element_set_name, dim)
    if verbose == 1 or verbose == 2:
            print ("\rReading element set %s." % (element_set_name)),
    full_str = ""
    while True:
        start_of_line = f.tell()
        line = f.readline()
        if (line.strip() == ''):
            continue
        if line[0] == '*':
            element_set.ids = map(to_number, full_str.split(','))
            mesh.element_sets[element_set_name] = element_set
            f.seek(start_of_line)
            return 
        # Read element ids until empty line
        full_str += line.strip()
       

def read_node_set(f, mesh, verbose):
    line = f.readline()   
    re_node_set = re.compile("\*Nset, nset=(.*)")
    match = re_node_set.match(line)
    if not match:
        raise ReadInpFileError("Error parsing file. Expected '*Nset, "
                               "nset=X', got '" + line + "'.")
    node_set_name = re_node_set.match(line).group(1)
    node_set = NodeSet(node_set_name)
    if verbose == 1 or verbose == 2:
            print ("\rReading node set %s." % (node_set_name)),
    full_str = ""
    while True:
        start_of_line = f.tell()
        line = f.readline()
        if (line.strip() == ''):
            continue
        if line[0] == '*':
            node_set.ids = map(to_number, full_str.split(','))
            mesh.node_sets[node_set_name] = node_set
            f.seek(start_of_line)
            return 
        # Read element ids until empty line
        full_str += line.strip()


class UnknownKeyWord(Exception):
     def __init__(self, value):
         self.value = value
     def __str__(self):
        return repr(self.value)


class ReadInpFileError(Exception):
    """
    Exception to raise when there is a problem reading the input file to
    the parser function.
    """
    
    pass


def to_number(s):
    """
    Converts a string to a int if possible, else a float.
    """
    
    try:
        return int(s)
    except ValueError:
        return float(s)
